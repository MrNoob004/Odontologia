/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.ucuenca.Vista;
//package com.

import org.ucuenca.Controlador.Personal.*;
import org.ucuenca.Controlador.Usuario.*;
import org.ucuenca.Modelo.Citas.Plantillas.Requisito;
import org.ucuenca.Modelo.Usuarios.EstadoCivil;
import org.ucuenca.Vista.Personal.*;
import org.ucuenca.Vista.Usuario.PpUsuario;
import org.ucuenca.Vista.Usuario.ConfigUsuario;
import org.ucuenca.Vista.Usuario.ActaDivorcio;
import org.ucuenca.Vista.Usuario.ActaMatrimonio;
import org.ucuenca.Vista.Usuario.ActaNacimiento;
import org.ucuenca.Vista.Usuario.ActaDefuncion;
import org.ucuenca.Vista.Usuario.MisCitas;
import org.ucuenca.Vista.Usuario.Matrimonio;
import org.ucuenca.Vista.Usuario.Divorcio;
import org.ucuenca.Vista.Usuario.EmisionCedula;
import org.ucuenca.Vista.Usuario.CertificadoNacimiento;
import org.ucuenca.Vista.Usuario.EleccionFecha;
import org.ucuenca.Vista.Usuario.EmisionPasaporte;
//cargarPersonal

import javax.swing.*;
import java.awt.CardLayout;
import java.awt.event.ActionListener;


/**
 * @author chant
 */
public class PaginaPrincipal extends JFrame {

    /**
     * Creates new form Pruebas
     */

    /**
     * El Controlador correspondiente al servicio que se va a atender
     */
    ActionListener controladorActual;

    public PpUsuario panelUsuario = new PpUsuario(this);
    PpPersonal panelPersonal = new PpPersonal(this);

    CardLayout panelDerecho;
    CardLayout panelIzquierdo;

    public PaginaPrincipal() {
        initComponents();
        panelDerecho = (CardLayout) servicios.getLayout();
        panelIzquierdo = (CardLayout) barraLateral.getLayout();
        paginaInicial("PnlUsu");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgMenuPrincipal = new JPanel();
        servicios = new JPanel();
        barraLateral = new JPanel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        bgMenuPrincipal.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        servicios.setBackground(new java.awt.Color(255, 255, 255));
        servicios.setLayout(new CardLayout());
        bgMenuPrincipal.add(servicios, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 0, 700, 700));

        barraLateral.setBackground(new java.awt.Color(0, 0, 0));
        barraLateral.setLayout(new CardLayout());
        bgMenuPrincipal.add(barraLateral, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 300, 700));

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(bgMenuPrincipal, GroupLayout.PREFERRED_SIZE, 1000, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(bgMenuPrincipal, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public final void paginaInicial(String nombrePanel) {
        barraLateral.add(panelUsuario, nombrePanel);
        panelIzquierdo.show(barraLateral, nombrePanel);
        redibujarServicios(barraLateral);
        servicios.removeAll();
        redibujarServicios(servicios);
    }

    public void cambiarVistaPersonal(String nombrePanel) {
        barraLateral.removeAll();
        barraLateral.add(panelPersonal, "PnlPer");
        panelIzquierdo.show(barraLateral, nombrePanel);
        redibujarServicios(barraLateral);
        servicios.removeAll();
        redibujarServicios(servicios);
    }

    //VISTA USUARIO
    public void configuracionUsuario(String nombrePanel) {
        ConfigUsuario configUsuario = new ConfigUsuario(this);
        servicios.add(configUsuario, "ConfigUsu");
        panelDerecho.show(servicios, nombrePanel);
        redibujarServicios(servicios);
    }

    private void redibujarServicios(JPanel servicios) {
        servicios.revalidate();
        servicios.repaint();
    }

    public void cambiarVistaActaNacimiento(String nombrePanel) {
        ActaNacimiento actaNacimiento = new ActaNacimiento();
        controladorActual = new ControladorProcesoSimple(actaNacimiento);

        servicios.add(actaNacimiento, "ActNac");
        panelDerecho.show(servicios, nombrePanel);
        redibujarServicios(servicios);
    }

    public void cambiarVistaActaMatrimonio(String nombrePanel) {
        ActaMatrimonio actaMatrimonio = new ActaMatrimonio();
        controladorActual = new ControladorProcesoSimple(
                actaMatrimonio,
                new Requisito("estadoCivil", EstadoCivil.CASADO, "Debe constar como casado")
        );
        servicios.add(actaMatrimonio, "ActMat");
        panelDerecho.show(servicios, nombrePanel);
        redibujarServicios(servicios);
    }

    public void cambiarVistaActaDefuncion(String nombrePanel) {
        ActaDefuncion actaDefuncion = new ActaDefuncion();
        controladorActual = new ControladorProcesoSimple(
                actaDefuncion
        );
        servicios.add(actaDefuncion, "ActDef");
        panelDerecho.show(servicios, nombrePanel);
        redibujarServicios(servicios);
    }

    public void cambiarVistaActaDivorcio(String nombrePanel) {
        ActaDivorcio actaDivorcio = new ActaDivorcio();
        controladorActual = new ControladorProcesoSimple(
                actaDivorcio,
                new Requisito("estadoCivil", EstadoCivil.DIVORCIADO, "Debe constar como divorciado")
        );
        servicios.add(actaDivorcio, "ActDiv");
        panelDerecho.show(servicios, nombrePanel);
        redibujarServicios(servicios);
    }

    public void misCitas(String nobrePanel) {
        MisCitas cita = new MisCitas();
        controladorActual = new ControladorMisCitas(cita);
        servicios.add(cita, "MisCit");
        panelDerecho.show(servicios, nobrePanel);
        redibujarServicios(servicios);
    }

    public void turnoMatrimonio(String nombrePanel) {
        Matrimonio turnoMatri = new Matrimonio();
        servicios.add(turnoMatri, "turnoMatri");
        panelDerecho.show(servicios, nombrePanel);
        redibujarServicios(servicios);
        controladorActual = new ControladorMatrimonio(turnoMatri);
    }

    public void turnoDivorcio(String nombrePanel) {
        Divorcio turnoDivor = new Divorcio();
        controladorActual = new ControladorDivorcio(turnoDivor);
        servicios.add(turnoDivor, "turnoDiv");
        panelDerecho.show(servicios, nombrePanel);
        redibujarServicios(servicios);
    }

    public void certificadoNacimiento(String nombrePanel) {
        CertificadoNacimiento certiNacimiento = new CertificadoNacimiento();
        controladorActual = new ControladorNacimiento(
                certiNacimiento
        );
        servicios.add(certiNacimiento, "CertNacimiento");
        panelDerecho.show(servicios, nombrePanel);
        redibujarServicios(servicios);
    }

    public void eleccionFecha(String nombrePanel) {
        EleccionFecha elecFecha = new EleccionFecha();
        servicios.add(elecFecha, "Fecha");
        panelDerecho.show(servicios, nombrePanel);
        redibujarServicios(servicios);
    }

    public void turnoEmisionCedula(String nombrePanel) {
        EmisionCedula emisionCed = new EmisionCedula();
        controladorActual = new ControladorTurnoCedula(
                emisionCed
        );
        servicios.add(emisionCed, "EmiCed");
        panelDerecho.show(servicios, nombrePanel);
        redibujarServicios(servicios);
    }

    public void turnoEmisionPasaporte(String nombrePanel) {
        EmisionPasaporte pasaporte = new EmisionPasaporte();
        controladorActual = new ControladorTurnoPasaporte(
                pasaporte
        );
        servicios.add(pasaporte, "pasaport");
        panelDerecho.show(servicios, nombrePanel);
        redibujarServicios(servicios);
    }

    //VISTA PERSONAL

    public void actaMatrimonio(String nombrePanel1) {
        CertificadoMatrimonioPersonal certificadoMatri = new CertificadoMatrimonioPersonal();
        controladorActual = new ControladorActaMatrimonio(certificadoMatri);
        servicios.add(certificadoMatri, "CerMatri");
        panelDerecho.show(servicios, "CerMatri");
        panelDerecho.show(servicios, nombrePanel1);
        redibujarServicios(servicios);
    }

    public void actaNacimiento(String nombrePanel1) {
        CertificadoNacimientoPersonal certificadoNacimiento = new CertificadoNacimientoPersonal();
        controladorActual = new ControladorActaNacimiento(
                certificadoNacimiento
        );
        servicios.add(certificadoNacimiento, "CerNacimiento");
        panelDerecho.show(servicios, "CerNacimiento");
        panelDerecho.show(servicios, nombrePanel1);
        redibujarServicios(servicios);
    }

    public void actaDivorcio(String nombrePanel1) {
        CertificadoDivorcionPersonal certificadoDivorcio = new CertificadoDivorcionPersonal();
        controladorActual = new ControladorActaDivorcio(
                certificadoDivorcio
        );
        servicios.add(certificadoDivorcio, "CerDiv");
        panelDerecho.show(servicios, "CerNacimiento");
        panelDerecho.show(servicios, nombrePanel1);
        redibujarServicios(servicios);
    }

    public void actaDefuncion(String nombrePanel1) {
        CertificadoDefuncionPersonal certificadoDefuncion = new CertificadoDefuncionPersonal();
        controladorActual = new ControladorActaDefuncion(
                certificadoDefuncion
        );
        servicios.add(certificadoDefuncion, "CerDef");
        panelDerecho.show(servicios, "CerDef");
        panelDerecho.show(servicios, nombrePanel1);
        redibujarServicios(servicios);
    }

    public void emisionCedula(String nombrePanel1) {
        EmisionCedulaPersonal emiCed = new EmisionCedulaPersonal();
        controladorActual = new ControladorCedula(emiCed);
        servicios.add(emiCed, "EmiCed");
        panelDerecho.show(servicios, "EmiCed");
        panelDerecho.show(servicios, nombrePanel1);
        redibujarServicios(servicios);
    }

    public void emisionPasaporte(String nombrePanel1) {
        EmisionPasaportePersonal emiPas = new EmisionPasaportePersonal();
        controladorActual = new ControladorPasaporte(emiPas);
        servicios.add(emiPas, "EmiPas");
        panelDerecho.show(servicios, "EmiPas");
        panelDerecho.show(servicios, nombrePanel1);
        redibujarServicios(servicios);
    }

    public void registroDefuncion(String nombrePanel1) {
        RegistroDefuncionPersonal regisDef = new RegistroDefuncionPersonal();
        controladorActual = new ControladorRegistroDefuncion(regisDef);
        servicios.add(regisDef, "RegisDef");
        panelDerecho.show(servicios, "RegisDef");
        panelDerecho.show(servicios, nombrePanel1);
        redibujarServicios(servicios);
    }

    public void registroMatrimonio(String nombrePanel1) {
        RegistroMatrimonioPersonal regisMatri = new RegistroMatrimonioPersonal();
        controladorActual = new ControladorRegistroMatrimonio(regisMatri);
        servicios.add(regisMatri, "RegisMatri");
        panelDerecho.show(servicios, "RegisMatri");
        panelDerecho.show(servicios, nombrePanel1);
        redibujarServicios(servicios);
    }

    public void registroDivorcio(String nombrePanel1) {
        RegistroDivorcioPersonal registroDivorcio = new RegistroDivorcioPersonal();
        controladorActual = new ControladorRegistroDivorcio(registroDivorcio);
        servicios.add(registroDivorcio, "RegisDivorcio");
        panelDerecho.show(servicios, "RegisDivorcio");
        panelDerecho.show(servicios, nombrePanel1);
        redibujarServicios(servicios);
    }

    public void registroPersona(String nombrePanel1) {
        RegistroPersonaPersonal regisPer = new RegistroPersonaPersonal();
        controladorActual = new ControladorRegistroNacimiento(regisPer);
        servicios.add(regisPer, "RegisPer");
        panelDerecho.show(servicios, "RegisPer");
        panelDerecho.show(servicios, nombrePanel1);
        redibujarServicios(servicios);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PaginaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PaginaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PaginaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PaginaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PaginaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel bgMenuPrincipal;
    private JPanel servicios;
    public JPanel barraLateral;
    // End of variables declaration//GEN-END:variables
}
